name: Create Release

on:
  push:
    tags:
      - "*" # 监听所有 tag 推送，但后续会检查格式

jobs:
  create_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Parse changelog and create release notes
        id: changelog
        run: |
          # 安装必要的工具（如 jq、grep、sed 等）  
          sudo apt-get update  
          sudo apt-get install -y jq grep sed  

          # 获取推送的 tag 版本号  
          TAG_NAME=${GITHUB_REF#refs/tags/}  

          # 检查 tag 是否符合版本号格式（可选，但推荐）  
          if ! [[ "$TAG_NAME" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then  
            echo "Tag does not match version format (e.g., 1.0.0). Exiting..."  
            exit 1  
          fi  

          # 从 changelog.md 中提取对应版本的发布说明  
          CHANGELOG_ENTRY=$(grep -A 100 "## ${TAG_NAME}" demos/demo-normal/uni_modules/zebra-ui/changelog.md | sed -n '/##.*/,/^$/{/##/!p}')  

          # 清理发布说明中的多余换行和空格（如果需要）  
          CHANGELOG_ENTRY=$(echo "$CHANGELOG_ENTRY" | sed '/^$/d' | sed 's/^\s*//')  

          # 将发布说明设置为 output 变量  
          echo "::set-output name=release_notes::$(echo "$CHANGELOG_ENTRY")"

      - name: Create a GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }} # 这里应该是完整的 tag 名，但由于我们之前已经去掉了前缀，所以这里直接使用
          release_name: ${{ github.ref_name }} # 发布名称也可以设置为 tag 名
          body: ${{ steps.changelog.outputs.release_notes }}
          draft: false
          prerelease: false
